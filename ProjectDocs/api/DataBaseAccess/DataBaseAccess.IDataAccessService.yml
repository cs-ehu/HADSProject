### YamlMime:ManagedReference
items:
- uid: DataBaseAccess.IDataAccessService
  commentId: T:DataBaseAccess.IDataAccessService
  id: IDataAccessService
  parent: DataBaseAccess
  children:
  - DataBaseAccess.IDataAccessService.ConnectionString
  - DataBaseAccess.IDataAccessService.NonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  - DataBaseAccess.IDataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  - DataBaseAccess.IDataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  langs:
  - csharp
  - vb
  name: IDataAccessService
  nameWithType: IDataAccessService
  fullName: DataBaseAccess.IDataAccessService
  type: Interface
  source:
    remote:
      path: DataBaseAccess/Framework/IDataAccessService.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: IDataAccessService
    path: ../DataBaseAccess/Framework/IDataAccessService.cs
    startLine: 6
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: public interface IDataAccessService
    content.vb: Public Interface IDataAccessService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DataBaseAccess.IDataAccessService.ConnectionString
  commentId: P:DataBaseAccess.IDataAccessService.ConnectionString
  id: ConnectionString
  parent: DataBaseAccess.IDataAccessService
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: IDataAccessService.ConnectionString
  fullName: DataBaseAccess.IDataAccessService.ConnectionString
  type: Property
  source:
    remote:
      path: DataBaseAccess/Framework/IDataAccessService.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: ConnectionString
    path: ../DataBaseAccess/Framework/IDataAccessService.cs
    startLine: 8
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  syntax:
    content: string ConnectionString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ConnectionString As String
  overload: DataBaseAccess.IDataAccessService.ConnectionString*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DataBaseAccess.IDataAccessService.NonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  commentId: M:DataBaseAccess.IDataAccessService.NonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  id: NonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  parent: DataBaseAccess.IDataAccessService
  langs:
  - csharp
  - vb
  name: NonQuery(String, Dictionary<String, Object>, CommandType)
  nameWithType: IDataAccessService.NonQuery(String, Dictionary<String, Object>, CommandType)
  fullName: DataBaseAccess.IDataAccessService.NonQuery(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Data.CommandType)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/IDataAccessService.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: NonQuery
    path: ../DataBaseAccess/Framework/IDataAccessService.cs
    startLine: 20
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  summary: "\nExecutes the passed sql query in the database and returns the number of rows affected.\nFor UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command.\nWhen a trigger exists on a table being inserted or updated, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers.\nFor all other types of statements and rollbacks the return value is -1.\n"
  example: []
  syntax:
    content: int NonQuery(string query, Dictionary<string, object> parameters = null, CommandType commandType = CommandType.Text)
    parameters:
    - id: query
      type: System.String
      description: The sql query to execute
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The query aditional parameters
    - id: commandType
      type: System.Data.CommandType
      description: Indicates how the query string will be interpreted. The default is <xref href="System.Data.CommandType.Text" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Int32
      description: The number of rows affected
    content.vb: Function NonQuery(query As String, parameters As Dictionary(Of String, Object) = Nothing, commandType As CommandType = CommandType.Text) As Integer
  overload: DataBaseAccess.IDataAccessService.NonQuery*
  nameWithType.vb: IDataAccessService.NonQuery(String, Dictionary(Of String, Object), CommandType)
  fullName.vb: DataBaseAccess.IDataAccessService.NonQuery(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Data.CommandType)
  name.vb: NonQuery(String, Dictionary(Of String, Object), CommandType)
- uid: DataBaseAccess.IDataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  commentId: M:DataBaseAccess.IDataAccessService.Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  id: Query(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  parent: DataBaseAccess.IDataAccessService
  langs:
  - csharp
  - vb
  name: Query(String, Dictionary<String, Object>, CommandType)
  nameWithType: IDataAccessService.Query(String, Dictionary<String, Object>, CommandType)
  fullName: DataBaseAccess.IDataAccessService.Query(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Data.CommandType)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/IDataAccessService.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: Query
    path: ../DataBaseAccess/Framework/IDataAccessService.cs
    startLine: 30
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  summary: "\nExecutes the passed sql query in the database and returns a <xref href=\"System.Collections.Generic.List%601\" data-throw-if-not-resolved=\"false\"></xref> of elements of type <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\nEach element in the list represents a row and each dictionary element represents a column. The column value can be accesed by its same.\n"
  example: []
  syntax:
    content: QueryResult Query(string query, Dictionary<string, object> parameters = null, CommandType commandType = CommandType.Text)
    parameters:
    - id: query
      type: System.String
      description: The sql query to execute
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The query aditional parameters
    - id: commandType
      type: System.Data.CommandType
      description: Indicates how the query string will be interpreted. The default is <xref href="System.Data.CommandType.Text" data-throw-if-not-resolved="false"></xref>
    return:
      type: DataBaseAccess.QueryResult
      description: A collection of rows returned by the query
    content.vb: Function Query(query As String, parameters As Dictionary(Of String, Object) = Nothing, commandType As CommandType = CommandType.Text) As QueryResult
  overload: DataBaseAccess.IDataAccessService.Query*
  nameWithType.vb: IDataAccessService.Query(String, Dictionary(Of String, Object), CommandType)
  fullName.vb: DataBaseAccess.IDataAccessService.Query(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Data.CommandType)
  name.vb: Query(String, Dictionary(Of String, Object), CommandType)
- uid: DataBaseAccess.IDataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  commentId: M:DataBaseAccess.IDataAccessService.Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  id: Scalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Data.CommandType)
  parent: DataBaseAccess.IDataAccessService
  langs:
  - csharp
  - vb
  name: Scalar<T>(String, Dictionary<String, Object>, CommandType)
  nameWithType: IDataAccessService.Scalar<T>(String, Dictionary<String, Object>, CommandType)
  fullName: DataBaseAccess.IDataAccessService.Scalar<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Data.CommandType)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/IDataAccessService.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: Scalar
    path: ../DataBaseAccess/Framework/IDataAccessService.cs
    startLine: 41
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess
  summary: "\nRetrieve a single value from a database.\nIt returns the first column of the first row in the result set returned by the query, the additional columns or rows are ignored.\n"
  example: []
  syntax:
    content: T Scalar<T>(string query, Dictionary<string, object> parameters = null, CommandType commandType = CommandType.Text)
    parameters:
    - id: query
      type: System.String
      description: The sql query to execute
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: The query aditional parameters
    - id: commandType
      type: System.Data.CommandType
      description: Indicates how the query string will be interpreted. The default is <xref href="System.Data.CommandType.Text" data-throw-if-not-resolved="false"></xref>
    typeParameters:
    - id: T
      description: The expected scalar query type
    return:
      type: '{T}'
      description: The first column of the first row in the result set, or a <xref uid="langword_csharp_null" name="null" href=""></xref> reference if the result set is empty.
    content.vb: Function Scalar(Of T)(query As String, parameters As Dictionary(Of String, Object) = Nothing, commandType As CommandType = CommandType.Text) As T
  overload: DataBaseAccess.IDataAccessService.Scalar*
  nameWithType.vb: IDataAccessService.Scalar(Of T)(String, Dictionary(Of String, Object), CommandType)
  fullName.vb: DataBaseAccess.IDataAccessService.Scalar(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Data.CommandType)
  name.vb: Scalar(Of T)(String, Dictionary(Of String, Object), CommandType)
references:
- uid: DataBaseAccess
  commentId: N:DataBaseAccess
  name: DataBaseAccess
  nameWithType: DataBaseAccess
  fullName: DataBaseAccess
- uid: DataBaseAccess.IDataAccessService.ConnectionString*
  commentId: Overload:DataBaseAccess.IDataAccessService.ConnectionString
  name: ConnectionString
  nameWithType: IDataAccessService.ConnectionString
  fullName: DataBaseAccess.IDataAccessService.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Data.CommandType.Text
  commentId: F:System.Data.CommandType.Text
  isExternal: true
- uid: DataBaseAccess.IDataAccessService.NonQuery*
  commentId: Overload:DataBaseAccess.IDataAccessService.NonQuery
  name: NonQuery
  nameWithType: IDataAccessService.NonQuery
  fullName: DataBaseAccess.IDataAccessService.NonQuery
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.CommandType
  commentId: T:System.Data.CommandType
  parent: System.Data
  isExternal: true
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DataBaseAccess.IDataAccessService.Query*
  commentId: Overload:DataBaseAccess.IDataAccessService.Query
  name: Query
  nameWithType: IDataAccessService.Query
  fullName: DataBaseAccess.IDataAccessService.Query
- uid: DataBaseAccess.QueryResult
  commentId: T:DataBaseAccess.QueryResult
  parent: DataBaseAccess
  name: QueryResult
  nameWithType: QueryResult
  fullName: DataBaseAccess.QueryResult
- uid: DataBaseAccess.IDataAccessService.Scalar*
  commentId: Overload:DataBaseAccess.IDataAccessService.Scalar
  name: Scalar
  nameWithType: IDataAccessService.Scalar
  fullName: DataBaseAccess.IDataAccessService.Scalar
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
