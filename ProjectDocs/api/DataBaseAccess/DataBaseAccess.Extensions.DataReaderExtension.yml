### YamlMime:ManagedReference
items:
- uid: DataBaseAccess.Extensions.DataReaderExtension
  commentId: T:DataBaseAccess.Extensions.DataReaderExtension
  id: DataReaderExtension
  parent: DataBaseAccess.Extensions
  children:
  - DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary(System.Data.IDataReader)
  - DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords(System.Data.IDataReader)
  - DataBaseAccess.Extensions.DataReaderExtension.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})
  langs:
  - csharp
  - vb
  name: DataReaderExtension
  nameWithType: DataReaderExtension
  fullName: DataBaseAccess.Extensions.DataReaderExtension
  type: Class
  source:
    remote:
      path: DataBaseAccess/Framework/DataReaderExtension.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: DataReaderExtension
    path: ../DataBaseAccess/Framework/DataReaderExtension.cs
    startLine: 8
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess.Extensions
  syntax:
    content: public static class DataReaderExtension
    content.vb: Public Module DataReaderExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DataBaseAccess.Extensions.DataReaderExtension.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})
  commentId: M:DataBaseAccess.Extensions.DataReaderExtension.Select``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})
  id: Select``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})
  isExtensionMethod: true
  parent: DataBaseAccess.Extensions.DataReaderExtension
  langs:
  - csharp
  - vb
  name: Select<T>(IDataReader, Func<IDataReader, T>)
  nameWithType: DataReaderExtension.Select<T>(IDataReader, Func<IDataReader, T>)
  fullName: DataBaseAccess.Extensions.DataReaderExtension.Select<T>(System.Data.IDataReader, System.Func<System.Data.IDataReader, T>)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/DataReaderExtension.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: Select
    path: ../DataBaseAccess/Framework/DataReaderExtension.cs
    startLine: 10
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess.Extensions
  syntax:
    content: public static IEnumerable<T> Select<T>(this IDataReader reader, Func<IDataReader, T> projection)
    parameters:
    - id: reader
      type: System.Data.IDataReader
    - id: projection
      type: System.Func{System.Data.IDataReader,{T}}
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of T)(reader As IDataReader, projection As Func(Of IDataReader, T)) As IEnumerable(Of T)
  overload: DataBaseAccess.Extensions.DataReaderExtension.Select*
  nameWithType.vb: DataReaderExtension.Select(Of T)(IDataReader, Func(Of IDataReader, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataBaseAccess.Extensions.DataReaderExtension.Select(Of T)(System.Data.IDataReader, System.Func(Of System.Data.IDataReader, T))
  name.vb: Select(Of T)(IDataReader, Func(Of IDataReader, T))
- uid: DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary(System.Data.IDataReader)
  commentId: M:DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary(System.Data.IDataReader)
  id: GetDataDictionary(System.Data.IDataReader)
  isExtensionMethod: true
  parent: DataBaseAccess.Extensions.DataReaderExtension
  langs:
  - csharp
  - vb
  name: GetDataDictionary(IDataReader)
  nameWithType: DataReaderExtension.GetDataDictionary(IDataReader)
  fullName: DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary(System.Data.IDataReader)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/DataReaderExtension.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: GetDataDictionary
    path: ../DataBaseAccess/Framework/DataReaderExtension.cs
    startLine: 16
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess.Extensions
  syntax:
    content: public static IEnumerable<Dictionary<string, object>> GetDataDictionary(this IDataReader reader)
    parameters:
    - id: reader
      type: System.Data.IDataReader
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDataDictionary(reader As IDataReader) As IEnumerable(Of Dictionary(Of String, Object))
  overload: DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords(System.Data.IDataReader)
  commentId: M:DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords(System.Data.IDataReader)
  id: GetDataRecords(System.Data.IDataReader)
  isExtensionMethod: true
  parent: DataBaseAccess.Extensions.DataReaderExtension
  langs:
  - csharp
  - vb
  name: GetDataRecords(IDataReader)
  nameWithType: DataReaderExtension.GetDataRecords(IDataReader)
  fullName: DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords(System.Data.IDataReader)
  type: Method
  source:
    remote:
      path: DataBaseAccess/Framework/DataReaderExtension.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: GetDataRecords
    path: ../DataBaseAccess/Framework/DataReaderExtension.cs
    startLine: 22
  assemblies:
  - DataBaseAccess
  namespace: DataBaseAccess.Extensions
  syntax:
    content: public static IEnumerable<IDataRecord> GetDataRecords(this IDataReader reader)
    parameters:
    - id: reader
      type: System.Data.IDataReader
    return:
      type: System.Collections.Generic.IEnumerable{System.Data.IDataRecord}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDataRecords(reader As IDataReader) As IEnumerable(Of IDataRecord)
  overload: DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DataBaseAccess.Extensions
  commentId: N:DataBaseAccess.Extensions
  name: DataBaseAccess.Extensions
  nameWithType: DataBaseAccess.Extensions
  fullName: DataBaseAccess.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DataBaseAccess.Extensions.DataReaderExtension.Select*
  commentId: Overload:DataBaseAccess.Extensions.DataReaderExtension.Select
  name: Select
  nameWithType: DataReaderExtension.Select
  fullName: DataBaseAccess.Extensions.DataReaderExtension.Select
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Func{System.Data.IDataReader,{T}}
  commentId: T:System.Func{System.Data.IDataReader,``0}
  parent: System
  definition: System.Func`2
  name: Func<IDataReader, T>
  nameWithType: Func<IDataReader, T>
  fullName: System.Func<System.Data.IDataReader, T>
  nameWithType.vb: Func(Of IDataReader, T)
  fullName.vb: System.Func(Of System.Data.IDataReader, T)
  name.vb: Func(Of IDataReader, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataReader
    name: IDataReader
    nameWithType: IDataReader
    fullName: System.Data.IDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataReader
    name: IDataReader
    nameWithType: IDataReader
    fullName: System.Data.IDataReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary*
  commentId: Overload:DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary
  name: GetDataDictionary
  nameWithType: DataReaderExtension.GetDataDictionary
  fullName: DataBaseAccess.Extensions.DataReaderExtension.GetDataDictionary
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Dictionary<String, Object>>
  nameWithType: IEnumerable<Dictionary<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of Dictionary(Of String, Object))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: IEnumerable(Of Dictionary(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords*
  commentId: Overload:DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords
  name: GetDataRecords
  nameWithType: DataReaderExtension.GetDataRecords
  fullName: DataBaseAccess.Extensions.DataReaderExtension.GetDataRecords
- uid: System.Collections.Generic.IEnumerable{System.Data.IDataRecord}
  commentId: T:System.Collections.Generic.IEnumerable{System.Data.IDataRecord}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IDataRecord>
  nameWithType: IEnumerable<IDataRecord>
  fullName: System.Collections.Generic.IEnumerable<System.Data.IDataRecord>
  nameWithType.vb: IEnumerable(Of IDataRecord)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Data.IDataRecord)
  name.vb: IEnumerable(Of IDataRecord)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.IDataRecord
    name: IDataRecord
    nameWithType: IDataRecord
    fullName: System.Data.IDataRecord
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.IDataRecord
    name: IDataRecord
    nameWithType: IDataRecord
    fullName: System.Data.IDataRecord
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
