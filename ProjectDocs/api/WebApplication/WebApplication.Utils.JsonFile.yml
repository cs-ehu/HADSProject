### YamlMime:ManagedReference
items:
- uid: WebApplication.Utils.JsonFile
  commentId: T:WebApplication.Utils.JsonFile
  id: JsonFile
  parent: WebApplication.Utils
  children:
  - WebApplication.Utils.JsonFile.MakeRelativePath(System.String,System.String)
  - WebApplication.Utils.JsonFile.Read``1(System.String)
  - WebApplication.Utils.JsonFile.Write``1(System.String,``0,Newtonsoft.Json.Formatting)
  langs:
  - csharp
  - vb
  name: JsonFile
  nameWithType: JsonFile
  fullName: WebApplication.Utils.JsonFile
  type: Class
  source:
    remote:
      path: WebApplication/Utils/JsonFile.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: JsonFile
    path: ../WebApplication/Utils/JsonFile.cs
    startLine: 9
  assemblies:
  - WebApplication
  namespace: WebApplication.Utils
  syntax:
    content: public static class JsonFile
    content.vb: Public Module JsonFile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: WebApplication.Utils.JsonFile.Read``1(System.String)
  commentId: M:WebApplication.Utils.JsonFile.Read``1(System.String)
  id: Read``1(System.String)
  parent: WebApplication.Utils.JsonFile
  langs:
  - csharp
  - vb
  name: Read<T>(String)
  nameWithType: JsonFile.Read<T>(String)
  fullName: WebApplication.Utils.JsonFile.Read<T>(System.String)
  type: Method
  source:
    remote:
      path: WebApplication/Utils/JsonFile.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: Read
    path: ../WebApplication/Utils/JsonFile.cs
    startLine: 11
  assemblies:
  - WebApplication
  namespace: WebApplication.Utils
  syntax:
    content: public static T Read<T>(string path)
    parameters:
    - id: path
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Read(Of T)(path As String) As T
  overload: WebApplication.Utils.JsonFile.Read*
  nameWithType.vb: JsonFile.Read(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WebApplication.Utils.JsonFile.Read(Of T)(System.String)
  name.vb: Read(Of T)(String)
- uid: WebApplication.Utils.JsonFile.Write``1(System.String,``0,Newtonsoft.Json.Formatting)
  commentId: M:WebApplication.Utils.JsonFile.Write``1(System.String,``0,Newtonsoft.Json.Formatting)
  id: Write``1(System.String,``0,Newtonsoft.Json.Formatting)
  parent: WebApplication.Utils.JsonFile
  langs:
  - csharp
  - vb
  name: Write<T>(String, T, Formatting)
  nameWithType: JsonFile.Write<T>(String, T, Formatting)
  fullName: WebApplication.Utils.JsonFile.Write<T>(System.String, T, Newtonsoft.Json.Formatting)
  type: Method
  source:
    remote:
      path: WebApplication/Utils/JsonFile.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: Write
    path: ../WebApplication/Utils/JsonFile.cs
    startLine: 15
  assemblies:
  - WebApplication
  namespace: WebApplication.Utils
  syntax:
    content: public static void Write<T>(string path, T data, Formatting formatting = Formatting.Indented)
    parameters:
    - id: path
      type: System.String
    - id: data
      type: '{T}'
    - id: formatting
      type: Newtonsoft.Json.Formatting
    typeParameters:
    - id: T
    content.vb: Public Shared Sub Write(Of T)(path As String, data As T, formatting As Formatting = Formatting.Indented)
  overload: WebApplication.Utils.JsonFile.Write*
  nameWithType.vb: JsonFile.Write(Of T)(String, T, Formatting)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: WebApplication.Utils.JsonFile.Write(Of T)(System.String, T, Newtonsoft.Json.Formatting)
  name.vb: Write(Of T)(String, T, Formatting)
- uid: WebApplication.Utils.JsonFile.MakeRelativePath(System.String,System.String)
  commentId: M:WebApplication.Utils.JsonFile.MakeRelativePath(System.String,System.String)
  id: MakeRelativePath(System.String,System.String)
  parent: WebApplication.Utils.JsonFile
  langs:
  - csharp
  - vb
  name: MakeRelativePath(String, String)
  nameWithType: JsonFile.MakeRelativePath(String, String)
  fullName: WebApplication.Utils.JsonFile.MakeRelativePath(System.String, System.String)
  type: Method
  source:
    remote:
      path: WebApplication/Utils/JsonFile.cs
      branch: master
      repo: git@github.com:cs-ehu/HADSProject-Fork.git
    id: MakeRelativePath
    path: ../WebApplication/Utils/JsonFile.cs
    startLine: 30
  assemblies:
  - WebApplication
  namespace: WebApplication.Utils
  summary: "\nCreates a relative path from one file or folder to another.\n"
  example: []
  syntax:
    content: public static string MakeRelativePath(string fromPath, string toPath)
    parameters:
    - id: fromPath
      type: System.String
      description: Contains the directory that defines the start of the relative path.
    - id: toPath
      type: System.String
      description: Contains the path that defines the endpoint of the relative path.
    return:
      type: System.String
      description: The relative path from the start directory to the end path or <code>toPath</code> if the paths are not related.
    content.vb: Public Shared Function MakeRelativePath(fromPath As String, toPath As String) As String
  overload: WebApplication.Utils.JsonFile.MakeRelativePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: WebApplication.Utils
  commentId: N:WebApplication.Utils
  name: WebApplication.Utils
  nameWithType: WebApplication.Utils
  fullName: WebApplication.Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: WebApplication.Utils.JsonFile.Read*
  commentId: Overload:WebApplication.Utils.JsonFile.Read
  name: Read
  nameWithType: JsonFile.Read
  fullName: WebApplication.Utils.JsonFile.Read
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: WebApplication.Utils.JsonFile.Write*
  commentId: Overload:WebApplication.Utils.JsonFile.Write
  name: Write
  nameWithType: JsonFile.Write
  fullName: WebApplication.Utils.JsonFile.Write
- uid: Newtonsoft.Json.Formatting
  commentId: T:Newtonsoft.Json.Formatting
  parent: Newtonsoft.Json
  isExternal: true
  name: Formatting
  nameWithType: Formatting
  fullName: Newtonsoft.Json.Formatting
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: true
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: WebApplication.Utils.JsonFile.MakeRelativePath*
  commentId: Overload:WebApplication.Utils.JsonFile.MakeRelativePath
  name: MakeRelativePath
  nameWithType: JsonFile.MakeRelativePath
  fullName: WebApplication.Utils.JsonFile.MakeRelativePath
